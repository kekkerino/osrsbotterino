plugins {
    id 'java'
    id 'idea'
}


allprojects {
    repositories {
        maven { url "https://jitpack.io" }
    }
}

repositories {
    mavenLocal()
    maven {
        url = 'https://repo.runelite.net'
    }
    mavenCentral()
}

enum OperatingSystem {
    MAC, WINDOWS, LINUX, UNKNOWN
}

static def getOperatingSystem() {
    final String os = System.getProperty("os.name")
    if (os.contains("Mac")) {
        return OperatingSystem.MAC
    } else if (os.contains("Windows")) {
        return OperatingSystem.WINDOWS
    } else if (os.contains("Linux")) {
        return OperatingSystem.LINUX
    } else {
        return OperatingSystem.UNKNOWN
    }

}

static def getBotScriptDirectory(project) {
    final String NAME = "OsrsBot"
    final String SCRIPT_DIRECTORY = "/Scripts/Sources/"
    final String env = System.getenv(NAME.toUpperCase().concat("_HOME"))
    if (env == null || env.isEmpty()) {
        String homeDirBuilder = System.getProperty("user.home")
        switch(getOperatingSystem()) {
            case OperatingSystem.LINUX:
                homeDirBuilder += File.separator + ".config"
                break
            case OperatingSystem.MAC:
                homeDirBuilder += (homeDirBuilder == null) ? "~" : ""
                break
            case OperatingSystem.WINDOWS:
                //Do nothing
                break
            default:
                //If you're using Solaris or something you're wrong.
                break
        }
        return (homeDirBuilder + File.separator + NAME + SCRIPT_DIRECTORY)
    }
    return env
}


//This allows us to assign the build directory to where our bot will search for scripts in.
sourceSets {
    main {
        java.getDestinationDirectory().set(file(getBotScriptDirectory(this)))
    }
}

def runeLiteVersion = '1.8.11'
def osrsbotVersion = '0.0.7'
def daxWalkerVersion = '0.0.3'



dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.slf4j:slf4j-simple:1.7.36'

    implementation group: 'net.sf.jopt-simple', name:'jopt-simple', version: '5.0.4'

    compileOnly group: 'net.runelite', name:'client', version: runeLiteVersion

    testImplementation group: 'net.runelite', name:'client', version: runeLiteVersion
    testImplementation group: 'net.runelite', name:'jshell', version: runeLiteVersion
    //We want these both at compile and at runtime.
    //So we use implementation instead of compileOnly or runtimeOnly
    //implementation project(":OSRSBot")
    implementation group: 'com.github.OSRSB', name: 'OsrsBot', version: osrsbotVersion
    //implementation project(":DaxWalkerRSB")\
    implementation group: 'com.github.OSRSB', name: 'DaxWalkerRSB', version: daxWalkerVersion
}

group = 'osrsb'
version = '0.0.8'


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task launchClientWithScript(type: JavaExec) {
    group = "Execution"
    description = "Runs the main method within RSB"
    classpath = sourceSets.main.runtimeClasspath
    getMainClass() set "rsb.botLauncher.Application"
    jvmArgs "-debug"
    args "--bot-runelite --developer-mode".split(" ")

}

